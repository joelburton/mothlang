
program        ::= declaration* EOF ;

// statements
declaration    ::= funDecl
                  | varDecl
                  | classDecl
                  | statement ;
varDecl        ::= "var" IDENTIFIER ( "=" expression )? ";" ;
classDecl      ::= "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}" ;
funDecl        ::= "fun" function ;
function       ::= IDENTIFIER "(" parameters? ")" block ;
parameters     ::= IDENTIFIER ( "," IDENTIFIER )* ;
statement      ::= exprStmt
                   | forStmt
                   | whileStmt
                   | ifStmt
                   | printStmt
                   | returnStmt
                   | block ;
exprStmt       ::= expression ";" ;
forStmt        ::= "for" "(" ( varDecl | exprStmt | ";" )
                      expression? ";"
                      expression? ")" statement
whileStmt      ::= "while" "(" expression ")" statement ;
ifStmt         ::= "if" "(" expression ")" statement ( "else" statement )? ;
printStmt      ::= "print" expression ";" ;
returnStmt     ::= "return" expression? ";" ;
block          ::= "{" declaration* "}" ;

// expressions
expression     ::= assignment ;
assignment     ::= ( call "." )? IDENTIFIER "=" assignment
                  | logic_or ;
logic_or       ::= logic_and ( "or" logic_and )* ;
logic_and      ::= equality ( "and" equality )* ;
equality       ::= comparison ( ( "!=" | "==" ) comparison )* ;
comparison     ::= term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           ::= factor ( ( "-" | "+" ) factor )* ;
factor         ::= unary ( ( "/" | "*" ) unary )* ;
unary          ::= ( "!" | "-" ) unary
                   | call ;
call           ::= primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments      ::= expression ( "," expression )* ;
primary        ::= NUMBER | STRING | "true" | "false" | "nil"
                   | "(" expression ")"
                   | IDENTIFIER
                   | "super" "." IDENTIFIER
                   ;
